openapi: 3.0.3
info:
  title: joel test api
  description: |-
    for test
  contact:
    email: joely1101@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
servers:
  - url: http://172.16.1.20:9001/vmapi/

paths:
  /domains:
    description: Returns a list of artists 
    get:
      summary: get domain list
      responses:
        '200':
          description: api success or fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
            
  /domain/{dmname}:
    description: Returns detail info of domain
    get:
      summary: list domanin info
      
      parameters:
        - name: dmname
          required: True
          in: path
          description: name
          schema:
            type: string


      responses:
        '200':
          description: api success or fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
                
  /domain/delete:
    post:
      summary: delete domain
      requestBody:
        content:
          application/json:
            schema:      # Request body contents
              type: object
              properties:
                name:
                  type: string
              example:   # Sample object
                name: cirrios
      responses:
        '200':
          description: api success or fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
                
  /domain/create:
    post:
      summary: create domain
      requestBody:
        content:
          application/json:
            schema:      # Request body contents
              type: object
              properties:
                name:
                  type: string
                disk:
                  type: string
                cpulist:
                  type: string
                memory:
                  type: number
                network:
                  type: array
                  items:
                    $ref: '#/components/schemas/network'
                  
              example:   # Sample object
                name: cirrios
                cpulist: "1"
                memory: 1024
                disk: "/home/jlee/work2/vm/cirros-0.5.2-x86_64-disk2.img"
                network: [{"source":"default","mac":"00:11:22:33:44:55"}]
                
      responses:
        '200':
          description: api success or fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
          
  /networks:
    description: Returns a list of vm networks
    get:
      summary: get network list
      
      responses:
        '200':
          description: api success or fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
                      
  /network/{nmname}:
    description: Returns a list of neworks 
    get:
      summary: list network info
      
      parameters:
        - name: nmname
          required: True
          in: path
          description: name
          schema:
            type: string


      responses:
        '200':
          description: Successfully returned a list of artists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
    
  /network/delete:
    post:
      summary: delete network
      requestBody:
        content:
          application/json:
            schema:      # Request body contents
              type: object
              properties:
                name:
                  type: string
              example:   # Sample object
                name: lan-network
      responses:
        '200':
          description: api success or fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
                
  /network/create:
    post:
      summary: create network
      requestBody:
        content:
          application/json:
            schema:      # Request body contents
              type: object
              properties:
                name:
                  type: string
                type:
                  type: string
                  default: macvtap
                  enum:
                    - vnet
                    - sriov
                    - macvtap
                interface:
                  type: string
                bridge:
                  type: string
                bridgetype:
                  type: string
                  default: nat
                  enum:
                    - nat
                    - bridge
                ipaddr:
                  type: string
                dhcpserver:
                  type: string
                  default: off
                  enum:
                    - on
                    - off
              example:   # Sample object
                name: lan-network
                type: macvtap
                interface: eth1
                bridge: vm-bridgex
                bridgetyp: nat
                ipaddr: 10.2.2.2
                dhcpserver: off
                
                
      responses:
        '200':
          description: api success or fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
          
  
                
components:
  schemas:
    network:
      type: object
      properties:
        source:
          type: string
          example: default22
        mac:
          type: string
          example: "00:11:11:11:11:11"
  
    result:
      type: object
      properties:
        result:
          type: string
          example: Success
        message:
          type: string
          example: ["message1","message2"]
        data:
          type: object
          example: {}
